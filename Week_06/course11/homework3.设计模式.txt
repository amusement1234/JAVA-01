3.（选做）根据课上提供的材料，系统性学习一遍设计模式，并在工作学习中思考如何用设计模式解决问题。

在设计模式的使用中，不能过度使用，也不能生搬硬套，要根据自己的项目选择。有可能多个设计模式组合使用。

以下内容参照：https://time.geekbang.org/column/article/227452


设计模式的三种类型：
1、创建型设计模式主要解决“对象的创建”问题。
2、结构型设计模式主要解决“类或对象的组合”问题。
3、行为型设计模式主要解决“类或对象之间的交互”问题。

常用的设计模式：
1、创建型：单例、工厂（工厂方法、抽象工厂）、建造者、原型。
2、结构型：代理、装饰者、适配器。
3、行为型：观察者、模板、策略、职责链、迭代器、状态。



1、单例：一个类只允许创建一个对象（或者叫实例）
2、工厂：创建不同但是相关类型的对象（继承同一父类或者接口的一组子类）
3、建造者：用来创建复杂对象，可以通过设置不同的可选参数，“定制化”地创建不同的对象。
4、原型：如果对象的创建成本比较大，而同一个类的不同对象之间差别不大（大部分字段都相同），在这种情况下，我们可以利用对已有对象（原型）进行复制（或者叫拷贝）的方式，来创建新对象，以达到节省创建时间的目的



1、代理：不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能。
2、装饰者：主要解决继承关系过于复杂的问题，通过组合来替代继承，给原始类添加增强功能。
3、适配器：用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。



1、观察者：将观察者和被观察者代码解耦。针对异步非阻塞观察者模式，我们也可以将它抽象成 EventBus 框架来达到这样的效果。
2、模板：在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。
3、策略：定义一组算法类，将每个算法分别封装起来，让它们可以互相替换。
4、责任链：多个处理器依次处理同一个请求。链条上的每个处理器各自承担各自的处理职责。
5、迭代器：它用来遍历集合对象。遍历集合一般有三种方式：for 循环、foreach 循环、迭代器遍历。
6、状态：一般用来实现状态机，而状态机常用在游戏、工作流引擎等系统开发中。