4.（选做）根据课上提供的材料，深入了解 Google 和 Alibaba 编码规范，并根据这些规范，检查自己写代码是否符合规范，有什么可以改进的。


查看了https://vipshop.github.io/vjtools/#/standard/chapter01，整理常用的编码规范：



一、命名规约：
Rule 5. 【推荐】包名全部小写。点分隔符之间尽量只有一个英语单词，即使有多个单词也不使用下划线或大小写分隔
正例： com.vip.javatool
反例： com.vip.java_tool, com.vip.javaTool


Rule 6. 【强制】类名与接口名使用UpperCamelCase风格，遵从驼峰形式
Tcp, Xml等缩写也遵循驼峰形式，可约定例外如：DTO/ VO等。

正例：UserId / XmlService / TcpUdpDeal / UserVO
反例：UserID / XMLService / TCPUDPDeal / UserVo


Rule 7. 【强制】方法名、参数名、成员变量、局部变量使用lowerCamelCase风格，遵从驼峰形式

正例： localValue / getHttpMessage();


Rule 8. 【强制】常量命名全大写，单词间用下划线隔开。力求语义表达完整清楚，不要嫌名字长

正例： MAX_STOCK_COUNT 
反例： MAX_COUNT

例外：当一个static final字段不是一个真正常量，比如不是基本类型时，不需要使用大写命名。
private static final Logger logger = Logger.getLogger(MyClass.class);


Rule 9. 【推荐】如果使用到了通用的设计模式，在类名中体现，有利于阅读者快速理解设计思想

正例：OrderFactory， LoginProxy ，ResourceObserver


Rule 10. 【推荐】枚举类名以Enum结尾; 抽象类使用Abstract或Base开头；异常类使用Exception结尾；测试类以它要测试的类名开始，以Test结尾

正例：DealStatusEnum， AbstractView，BaseView， TimeoutException，UserServiceTest


Rule 11. 【推荐】实现类尽量用Impl的后缀与接口关联，除了形容能力的接口

正例：CacheServiceImpl 实现 CacheService接口。
正例: Foo 实现 Translatable接口。


Rule 13. 【强制】避免成员变量，方法参数，局部变量的重名复写，引起混淆

类的私有成员变量名，不与父类的成员变量重名
方法的参数名/局部变量名，不与类的成员变量重名 (getter/setter例外)




二、格式规约：

Rule 3. 【推荐】 用小括号来限定运算优先级

if ((a == b) && (c == d))


Rule 4. 【推荐】类内方法定义的顺序，不要“总是在类的最后添加新方法”

一个类就是一篇文章，想象一个阅读者的存在，合理安排方法的布局。

1）顺序依次是：构造函数 > (公有方法>保护方法>私有方法) > getter/setter方法。

如果公有方法可以分成几组，私有方法也紧跟公有方法的分组。
2）当一个类有多个构造方法，或者多个同名的重载方法，这些方法应该放置在一起。其中参数较多的方法在后面。
3）作为调用者的方法，尽量放在被调用的方法前面。


Rule 5. 【推荐】通过空行进行逻辑分段

一段代码也是一段文章，需要合理的分段而不是一口气读到尾。



三、注释规约

Rule 2. 【推荐】通过更清晰的代码来避免注释
Rule 4.【推荐】避免创建人，创建日期，及更新日志的注释
Rule 5. 【强制】代码修改的同时，注释也要进行相应的修改。尤其是参数、返回值、异常、核心逻辑等的修改
Rule 6. 【强制】类、类的公有成员、方法的注释必须使用Javadoc规范，使用/** xxx */格式，不得使用//xxx方式
Rule 8. 【推荐】注释不要为了英文而英文
Rule 9. 【推荐】TODO标记，清晰说明代办事项和处理人



四、方法设计

Rule 1. 【推荐】方法的长度度量

方法尽量不要超过100行，或其他团队共同商定的行数。

Rule 5. 【推荐】方法参数最好不超过3个，最多不超过7个

Rule 6.【推荐】下列情形，需要进行参数校验
1） 调用频次低的方法。
2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，代价更大。
3） 需要极高稳定性和可用性的方法。
4） 对外提供的开放接口，不管是RPC/HTTP/公共类库的API接口。


Rule 7.【推荐】下列情形，不需要进行参数校验

1） 极有可能被循环调用的方法。
2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。

比如，一般DAO层与Service层都在同一个应用中，所以DAO层的参数校验，可以省略。

3） 被声明成private，或其他只会被自己代码所调用的方法，如果能够确定在调用方已经做过检查，或者肯定不会有问题则可省略。

即使忽略检查，也尽量在方法说明里注明参数的要求，比如vjkit中的@NotNull，@Nullable标识。

Rule 11.【推荐】不能使用有继承关系的参数类型来重载方法

Rule 12.【强制】正被外部调用的接口，不允许修改方法签名，避免对接口的调用方产生影响

只能新增新接口，并对已过时接口加@Deprecated注解，并清晰地说明新接口是什么。




五、类设计

Rule 1. 【推荐】类成员与方法的可见性最小化

Rule 2.【推荐】 减少类之间的依赖

比如如果A类只依赖B类的某个属性，在构造函数和方法参数中，只传入该属性。让阅读者知道，A类只依赖了B类的这个属性，而不依赖其他属性，也不会调用B类的任何方法。

a.foo(b);     //WRONG
a.foo(b.bar); //RIGHT

Rule 4. 【推荐】类的长度度量

类尽量不要超过300行，或其他团队共同商定的行数。

Rule 5.【推荐】 构造函数如果有很多参数，且有多种参数组合时，建议使用Builder模式

Executor executor = new ThreadPoolBuilder().coreThread(10).queueLenth(100).build();

Rule 8.【强制】静态方法不能被子类覆写。

Rule 12.【强制】POJO类必须覆写toString方法。



六、控制语句

Rule 1. 【强制】if, else, for, do, while语句必须使用大括号，即使只有单条语句

Rule 2.【推荐】少用if-else方式，多用哨兵语句式以减少嵌套层次

Rule 4.【推荐】布尔表达式中的布尔运算符(&&,||)的个数不超过4个，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性

Rule 6.【推荐】减少使用取反的逻辑

Rule 7.【推荐】表达式中，能造成短路概率较大的逻辑尽量放前面，使得后面的判断可以免于执行

if (maybeTrue() || maybeFalse()) { ... }

if (maybeFalse() && maybeTrue()) { ... }


Rule 10.【推荐】能用while循环实现的代码，就不用do-while循环



七、基本类型与字符串


Rule 3. 数值equals比较的原则
3.1【强制】 所有包装类对象之间值的比较，全部使用equals方法比较
3.4【强制】 double及float的比较，要特殊处理


Rule 4. 数字类型的计算原则
4.1【强制】数字运算表达式，因为先进行等式右边的运算，再赋值给等式左边的变量，所以等式两边的类型要一致

例子1: int与int相除后，哪怕被赋值给float或double，结果仍然是四舍五入取整的int。
double d = 24/7;  //结果是3.0
double d =  (double)24/7; //结果是正确的3.42857

例子2： int与int相乘，哪怕被赋值给long，仍然会溢出。

需要强制将乘数的一方转换为long。

long l = Integer.MAX_VALUE * 2; // 结果是溢出的－2
long l = Integer.MAX_VALUE * 2L; //结果是正确的4294967294
另外，int的最大值约21亿，留意可能溢出的情况。



4.3【推荐】 double 或 float 计算时有不可避免的精度问题


float f = 0.45f/3;    //结果是0.14999999

double d1 = 0.45d/3;  //结果是正确的0.15

double d2 = 1.03d - 0.42d; //结果是0.6100000000000001


Rule 7. 【推荐】字符操作时，优先使用字符参数，而不是字符串，能提升性能
//WRONG
str.indexOf("e");

//RIGHT
stringBuilder.append('a'); 
str.indexOf('e');
str.replace('m','z');



八、集合处理

Rule 1. 【推荐】底层数据结构是数组的集合，指定集合初始大小

Rule 3. 【强制】不要在foreach循环里进行元素的remove/add操作，remove元素可使用Iterator方式

//WRONG
for (String str : list) {
  if (condition) {
    list.remove(str);
  }
}

//RIGHT
Iterator<String> it = list.iterator();
while (it.hasNext()) {
  String str = it.next();
  if (condition) {
    it.remove();
  }
} 


Rule 4. 【强制】使用entrySet遍历Map类集合Key/Value，而不是keySet 方式进行遍历
keySet遍历的方式，增加了N次用key获取value的查询。

Rule 6. 【强制】高度注意各种Map类集合Key/Value能不能存储null值的情况

Map			Key		Value
HashMap			Nullable	Nullable
ConcurrentHashMap	NotNull		NotNull
TreeMap			NotNull		Nullable


Rule 7. 【强制】长生命周期的集合，里面内容需要及时清理，避免内存泄漏


